"""Remove disciplines_raw from teachers

Revision ID: 9677fee7e358
Revises: 
Create Date: 2025-04-10 22:16:34.152826

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '9677fee7e358'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teacher_programs')
    op.drop_index('ix_taught_disciplines_discipline_id', table_name='taught_disciplines')
    op.drop_table('taught_disciplines')
    op.drop_index('ix_qualifications_qualification_id', table_name='qualifications')
    op.drop_table('qualifications')
    op.drop_table('users')
    op.drop_table('curriculum')
    op.drop_index('ix_retrainings_retraining_id', table_name='retrainings')
    op.drop_table('retrainings')
    op.drop_index('ix_education_programs_program_id', table_name='education_programs')
    op.drop_index('ix_education_programs_short_name', table_name='education_programs')
    op.drop_table('education_programs')
    op.drop_index('ix_teachers_teacher_id', table_name='teachers')
    op.drop_table('teachers')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('teachers',
    sa.Column('teacher_id', sa.INTEGER(), server_default=sa.text("nextval('teachers_teacher_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('position', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('education_level', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('qualification', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('base_education_specialty', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('scientific_education_specialty', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('academic_degree', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('academic_title', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('total_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('teaching_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('professional_experience', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('teacher_id', name='teachers_pkey'),
    sa.UniqueConstraint('full_name', name='teachers_full_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_teachers_teacher_id', 'teachers', ['teacher_id'], unique=False)
    op.create_table('education_programs',
    sa.Column('program_id', sa.INTEGER(), server_default=sa.text("nextval('education_programs_program_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('program_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('short_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('program_id', name='education_programs_pkey'),
    sa.UniqueConstraint('program_name', name='education_programs_program_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_education_programs_short_name', 'education_programs', ['short_name'], unique=True)
    op.create_index('ix_education_programs_program_id', 'education_programs', ['program_id'], unique=False)
    op.create_table('retrainings',
    sa.Column('retraining_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('program_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name='retrainings_teacher_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('retraining_id', name='retrainings_pkey')
    )
    op.create_index('ix_retrainings_retraining_id', 'retrainings', ['retraining_id'], unique=False)
    op.create_table('curriculum',
    sa.Column('curriculum_id', sa.INTEGER(), server_default=sa.text("nextval('curriculum_curriculum_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('discipline', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('department', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('semester', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True),
    sa.Column('lecture_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('practice_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('exam_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('test_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('course_project_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_practice_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('final_work_hours', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lab_hours', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['education_programs.program_id'], name='curriculum_program_id_fkey'),
    sa.PrimaryKeyConstraint('curriculum_id', name='curriculum_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey')
    )
    op.create_table('qualifications',
    sa.Column('qualification_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('program_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name='qualifications_teacher_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('qualification_id', name='qualifications_pkey')
    )
    op.create_index('ix_qualifications_qualification_id', 'qualifications', ['qualification_id'], unique=False)
    op.create_table('taught_disciplines',
    sa.Column('discipline_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('curriculum_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['curriculum_id'], ['curriculum.curriculum_id'], name='taught_disciplines_curriculum_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name='taught_disciplines_teacher_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('discipline_id', name='taught_disciplines_pkey')
    )
    op.create_index('ix_taught_disciplines_discipline_id', 'taught_disciplines', ['discipline_id'], unique=False)
    op.create_table('teacher_programs',
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('program_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['program_id'], ['education_programs.program_id'], name='teacher_programs_program_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['teacher_id'], ['teachers.teacher_id'], name='teacher_programs_teacher_id_fkey', ondelete='CASCADE')
    )
    # ### end Alembic commands ###
